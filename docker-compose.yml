version: '3'

services:
  reverse-proxy:
    container_name: '${DOMAIN_NAME}-reverse-proxy'
    restart: unless-stopped
    image: traefik:2.4
    command:
      - --api.insecure=true
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443
      - --providers.docker=true
      - --providers.file.filename=/etc/traefik/config.yml
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Map the dynamic conf into the container
      - ./config/traefik.${LOCAL_PROTOCOL}.yml:/etc/traefik/config.yml:ro
      # Map the certificats into the container
      - ./config/certs:/etc/certs:ro

  postgres:
    container_name: '${DOMAIN_NAME}-postgres'
    restart: unless-stopped
    image: 'postgres:13'
    ports:
      # NOTE: To avoid overlapping with any Postgres database run on the host machine,
      # we bind Postgres to port "15432" instead.
      - '15432:5432'
    volumes:
      - 'pgdata:/var/lib/postgresql/data/'
    environment:
      POSTGRES_PASSWORD: postgres

  compiler:
    container_name: '${DOMAIN_NAME}-compiler'
    restart: unless-stopped
    image: node:16
    command: npm run codegen:graphql -- --watch
    volumes:
      - .:/srv/compiler:rw
    working_dir: /srv/compiler
    depends_on:
      - next
    labels:
      - traefik.enable=false

  next:
    container_name: '${DOMAIN_NAME}-next'
    restart: unless-stopped
    image: node:16
    command: npm run dev:next
    ports:
      - '3000:3000'
    volumes:
      - .:/srv/next:rw
    working_dir: /srv/next
    env_file:
      - .env
    environment:
      # NOTE: We explicitly overwrite the database url here to point to the correct host.
      - DATABASE_URL=postgresql://postgres:postgres@${DOMAIN_NAME}-postgres/postgres
    depends_on:
      - postgres
    labels:
      # Set up both http and https endpoints:
      - 'traefik.http.routers.next-http.rule=Host(`${DOMAIN_NAME}.localhost`)'
      - 'traefik.http.routers.next-http.service=next'
      - 'traefik.http.routers.next-https.rule=Host(`${DOMAIN_NAME}.localhost`)'
      - 'traefik.http.routers.next-https.service=next'
      - 'traefik.http.routers.next-https.tls=true'
      - 'traefik.http.services.next.loadbalancer.server.port=3000'

volumes:
  pgdata: {}
